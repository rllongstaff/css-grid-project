// Base styles for all grids and items
.grid {
    background-color: rgba($color-secondary, .2);
    border: 1px dashed rgba($color-secondary, .5);
    display: grid;
    grid-gap: 1rem; 
    margin: 3rem auto;
    width: 80%;

    @include respond(tablet-portrait) {
        margin: 2rem auto;
        width: 90%;
    }

    @include respond(phone) {
        margin: 2rem auto;
        width: 90%; 
    }

    &__item {
        background-color: rgba($color-tertiary, .9); 
        border-radius: 3px;  
    }

    &__image {
        display: block;
        width: 100%;
    }
}

/*-------------- Fixed column grid ----------------------

--------------------------------------------------------*/
.grid-fixed-cols {    
    grid-template-columns: 200px 200px 200px 200px;
    
    @include respond(tablet-landscape) {
        grid-template-columns: 200px 200px 200px;        
    }

    @include respond(phone) {
        grid-template-columns: 200px;
        justify-content: center;
    }
}

/*-------------- Fluid column grid ----------------------

--------------------------------------------------------*/
.grid-fluid-cols {
    grid-template-columns: 20% auto repeat(2, 1fr);
}

/*-------------- Line positioned grid -------------------
To place in top left cell (first row, first column):
grid-row-start: 1;
grid-row-end: 2;
grid-column-start: 1;
grid-column-end: 2;

Shorthand the above with:
grid-row: 1 / 2;
grid-column: 1 / 2;

Even further shorthand with:
grid-area: 1 / 1 / 2 / 2;

where
grid-area: [row start] / [column start] / [row end] / [column end]

Can also write 'grid-row 1 / 3' as:
grid-row 1 / span 2;
--------------------------------------------------------*/
.grid-areas {
    grid: 100px 1fr 100px / 40% auto 1fr 2fr;

    @include respond(phone) {
        grid: auto 1fr auto / 20% auto 1fr 2fr;
    }

    &__item-1 {
        grid-row: 1 / 2;
        grid-column: 1 / 4;
    }

    &__item-2 {
        grid-row: 1 / 2;
        grid-column: 4 / 5;
    }

    &__item-3 {
        grid-row: 2 / 4;
        grid-column: 1 / 2;
    }

    &__item-4 {
        grid-row: 2 / 3;
        grid-column: 2 / 5;
    }

    &__item-5 {
        grid-row: 3 / 4;
        grid-column: 2 / 3;
    }

    &__item-6 {
        grid-row: 3 / 4;
        grid-column: 3 / 5;
    }
}

/*-------------- Named areas grid ----------------------
Using named areas you can define a template with 
predefined areas for item placement. For example the 
below says 'top three cells use for header, then use the
first two cells of row two for the main content' and so on
--------------------------------------------------------*/
.grid-named-areas {
    grid-template-areas: 
        "header header header"
        "main main sidebar"
        "sub-content-1 sub-content-2 sidebar"
        "footer footer footer";

    &__item-1 {
        grid-area: header;
    }

    &__item-2 {
        grid-area: main;
    }

    &__item-3 {
        grid-area: sidebar;
    }

    &__item-4 {
        grid-area: sub-content-1;
    }

    &__item-5 {
        grid-area: sub-content-2;
    }

    &__item-6 {
        grid-area: footer;
    }
}

/*------------ Nested grid inside a grid-----------------
A grid can be nested inside the cell of a parent grid.
To do this it's important to make sure that this particular
cell is set to 'display: grid'.
--------------------------------------------------------*/
.main-grid {
    grid: auto auto  / repeat(3, 1fr);

    @include respond(tablet-portrait) {
        grid: auto auto / repeat(2, 1fr);
    }

    @include respond(phone) {
        grid: auto / 1fr;
    }

    &__item-4 {
        display: grid;
        grid: auto auto / repeat(3, 1fr);

        @include respond(phone) {
            grid: auto auto auto / repeat(2, 1fr);
        }
    }
}


